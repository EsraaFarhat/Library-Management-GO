// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	models "library-management/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// UserRepositoryInterface is an autogenerated mock type for the UserRepositoryInterface type
type UserRepositoryInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: user
func (_m *UserRepositoryInterface) Create(user *models.User) (*models.User, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.User) (*models.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*models.User) *models.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *UserRepositoryInterface) Delete(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: page, limit, fields
func (_m *UserRepositoryInterface) GetAll(page int, limit int, fields []string) ([]models.User, int64, error) {
	ret := _m.Called(page, limit, fields)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.User
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, []string) ([]models.User, int64, error)); ok {
		return rf(page, limit, fields)
	}
	if rf, ok := ret.Get(0).(func(int, int, []string) []models.User); ok {
		r0 = rf(page, limit, fields)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, []string) int64); ok {
		r1 = rf(page, limit, fields)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, []string) error); ok {
		r2 = rf(page, limit, fields)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetByEmail provides a mock function with given fields: email, fields
func (_m *UserRepositoryInterface) GetByEmail(email string, fields []string) (*models.User, error) {
	ret := _m.Called(email, fields)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []string) (*models.User, error)); ok {
		return rf(email, fields)
	}
	if rf, ok := ret.Get(0).(func(string, []string) *models.User); ok {
		r0 = rf(email, fields)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(email, fields)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id, fields
func (_m *UserRepositoryInterface) GetByID(id uint, fields []string) (*models.User, error) {
	ret := _m.Called(id, fields)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, []string) (*models.User, error)); ok {
		return rf(id, fields)
	}
	if rf, ok := ret.Get(0).(func(uint, []string) *models.User); ok {
		r0 = rf(id, fields)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, []string) error); ok {
		r1 = rf(id, fields)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: user
func (_m *UserRepositoryInterface) Update(user *models.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserRepositoryInterface creates a new instance of UserRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepositoryInterface {
	mock := &UserRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
