// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	dto "library-management/internal/dto"

	mock "github.com/stretchr/testify/mock"
)

// AuthServiceInterface is an autogenerated mock type for the AuthServiceInterface type
type AuthServiceInterface struct {
	mock.Mock
}

// Login provides a mock function with given fields: req
func (_m *AuthServiceInterface) Login(req dto.UserLoginRequest) (string, dto.UserResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 dto.UserResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(dto.UserLoginRequest) (string, dto.UserResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(dto.UserLoginRequest) string); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(dto.UserLoginRequest) dto.UserResponse); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Get(1).(dto.UserResponse)
	}

	if rf, ok := ret.Get(2).(func(dto.UserLoginRequest) error); ok {
		r2 = rf(req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Register provides a mock function with given fields: req
func (_m *AuthServiceInterface) Register(req dto.UserRegisterRequest) (string, dto.UserResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 string
	var r1 dto.UserResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(dto.UserRegisterRequest) (string, dto.UserResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(dto.UserRegisterRequest) string); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(dto.UserRegisterRequest) dto.UserResponse); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Get(1).(dto.UserResponse)
	}

	if rf, ok := ret.Get(2).(func(dto.UserRegisterRequest) error); ok {
		r2 = rf(req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewAuthServiceInterface creates a new instance of AuthServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthServiceInterface {
	mock := &AuthServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
